{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creating a Unit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A Unit object is created with optional input and output streams or stream IDs. A Unit subclass may include additional key word arguments.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initialize a Unit with inputs, `ins`, and outputs ,`outs`, with either an iterable of Stream objects, or a Stream object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit: P1\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] d1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] d2\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "[1] d3\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "from biosteam import Unit, Stream\n",
    "ID = 'P1'\n",
    "ins = Stream()\n",
    "outs = (Stream(), Stream())\n",
    "P1 = Unit(ID, ins=ins, outs=outs)\n",
    "P1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also view a diagram() to check connections:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"173pt\" viewBox=\"0.00 0.00 338.00 173.00\" width=\"338pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 169)\">\n",
       "<title>unit</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-169 334,-169 334,4 -4,4\" stroke=\"none\"/>\n",
       "<!-- P1\n",
       "Unit&#45;&gt;d2 -->\n",
       "<g class=\"edge\" id=\"edge2\"><title>P1\n",
       "Unit:c-&gt;d2:w</title>\n",
       "<path d=\"M186.812,-101.801C208.32,-119.672 243.707,-143.5 279.5,-143.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- P1\n",
       "Unit&#45;&gt;d3 -->\n",
       "<g class=\"edge\" id=\"edge3\"><title>P1\n",
       "Unit:c-&gt;d3:w</title>\n",
       "<path d=\"M186.812,-63.1992C208.32,-45.3281 243.707,-21.5 279.5,-21.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- d1&#45;&gt;P1\n",
       "Unit -->\n",
       "<g class=\"edge\" id=\"edge1\"><title>d1:e-&gt;P1\n",
       "Unit:c</title>\n",
       "<path d=\"M50.5,-82.5C83.013,-82.5 120.765,-82.5 143.496,-82.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- P1\n",
       "Unit -->\n",
       "<g class=\"node\" id=\"node1\"><title>P1\n",
       "Unit</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_0\" x1=\"143.5\" x2=\"186.5\" y1=\"-82.5\" y2=\"-82.5\">\n",
       "<stop offset=\"0\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:#cdcdcd;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_0)\" points=\"186.5,-104 143.5,-104 143.5,-61 186.5,-61 186.5,-104\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"165\" y=\"-86.3\">P1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"165\" y=\"-71.3\">Unit</text>\n",
       "</g>\n",
       "<!-- d1 -->\n",
       "<g class=\"node\" id=\"node2\"><title>d1</title>\n",
       "<polygon fill=\"#79dae8\" points=\"32.5,-98 7.5,-98 7.5,-67 32.5,-67 32.5,-61 50.5,-82.5 32.5,-104 32.5,-98\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"29\" y=\"-78.8\">d1</text>\n",
       "</g>\n",
       "<!-- d2 -->\n",
       "<g class=\"node\" id=\"node3\"><title>d2</title>\n",
       "<polygon fill=\"#79dae8\" points=\"304.5,-159 279.5,-159 279.5,-128 304.5,-128 304.5,-122 322.5,-143.5 304.5,-165 304.5,-159\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301\" y=\"-139.8\">d2</text>\n",
       "</g>\n",
       "<!-- d3 -->\n",
       "<g class=\"node\" id=\"node4\"><title>d3</title>\n",
       "<polygon fill=\"#79dae8\" points=\"304.5,-37 279.5,-37 279.5,-6 304.5,-6 304.5,-0 322.5,-21.5 304.5,-43 304.5,-37\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"301\" y=\"-17.8\">d3</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "P1.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "IDs for Stream objects can also be used instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit: P1\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] in1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] out0\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "[1] out1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "P1 = Unit('P1', ins='in1', outs=('out0', 'out1'))\n",
    "P1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default, a unique `ID` is chosen, missing streams are given to `ins`, and empty streams to `outs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit: U0\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] Missing Stream\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] d4\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "[1] d5\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "unit = Unit()\n",
    "unit.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For either `ins` or `outs`, if None is given, missing streams are initialized. If an empty iterable is given, empty streams are initialized:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit: P1\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] Missing Stream\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] Missing Stream\n",
      "[1] Missing Stream\n"
     ]
    }
   ],
   "source": [
    "P1 = Unit('P1', outs=None, ins=None)\n",
    "P1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit: P1\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] d6\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] d7\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "[1] d8\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "P1 = Unit('P1', outs=(), ins=())\n",
    "P1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The number of default streams is different for each Unit subclass: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mixer: U1\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] Missing Stream\n",
      "[1] Missing Stream\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] d9\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "from biosteam import Mixer, Splitter\n",
    "Mixer().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Splitter: U2\n",
      "\u001b[37m\u001b[22mins...\u001b[0m\n",
      "[0] Missing Stream\n",
      "\u001b[37m\u001b[22mouts...\u001b[0m\n",
      "[0] d10\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n",
      "[1] d11\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flows:  0\n"
     ]
    }
   ],
   "source": [
    "Splitter().show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
