{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting started"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialize streams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Stream](https://thermosteam.readthedocs.io/en/latest/Stream.html) objects define material flow rates along with its thermodynamic state. Before creating streams, a [Thermo](https://thermosteam.readthedocs.io/en/latest/Thermo.html) property package must be defined. Alternatively, we can just pass chemical names and BioSTEAM will automatically create a property package based on ideal mixing rules and UNIFAC activity coefficients for thermodynamic equilibrium. More complex packages can be defined through Thermosteam, BioSTEAM's premier thermodynamic engine. Please visit [Thermosteam's documentation](https://thermosteam.readthedocs.io/en/latest/index.html) for a complete tutorial on [Stream](https://thermosteam.readthedocs.io/en/latest/Stream.html) objects and how to create a property package. In this example, a simple feed stream with a few common chemicals will be initialized:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stream: s1\n",
      " phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      " flow (kmol/hr): Water     20\n",
      "                 Glycerol  10\n"
     ]
    }
   ],
   "source": [
    "import biosteam as bst\n",
    "bst.settings.set_thermo(['Water', 'Methanol', 'Glycerol'])\n",
    "feed = bst.Stream(Water=20, Glycerol=10)\n",
    "feed.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set prices for performing techno-economic analysis later:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "192.18657"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feed.price = 0.15 # USD/kg\n",
    "feed.cost # USD/hr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Process settings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Process settings include price of feeds and products, conditions of utilities, and the chemical engineering plant cost index. These should be set before simulating a system.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set the chemical engineering plant cost index:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "567.5"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.CE # Default year is 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bst.CE = 603.1 # To year 2018"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [PowerUtility](https://biosteam.readthedocs.io/en/latest/PowerUtility.html) options:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0782"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.PowerUtility.price # Default price (USD/kJ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "bst.PowerUtility.price = 0.065 # Adjust price"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [HeatUtility](https://biosteam.readthedocs.io/en/latest/HeatUtility.html) options via [UtilityAgent](https://biosteam.readthedocs.io/en/latest/UtilityAgent.html) objects, which are basically [Stream](https://thermosteam.readthedocs.io/en/latest/Stream.html) objects with additional attributes to describe a utility agent:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<UtilityAgent: cooling_water>,\n",
       " <UtilityAgent: chilled_water>,\n",
       " <UtilityAgent: chilled_brine>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.HeatUtility.cooling_agents # All available cooling agents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UtilityAgent: cooling_water\n",
      " phase: 'l', T: 305.37 K, P: 101325 Pa\n",
      " heat_transfer_price: 0 USD/kJ\n",
      " regeneration_price: 0.000488 USD/kmol\n",
      " heat_transfer_efficiency: 1.000\n",
      " T_limit: 325 K\n",
      " flow (kmol/hr): Water  1\n"
     ]
    }
   ],
   "source": [
    "cw = bst.HeatUtility.get_cooling_agent('cooling_water')\n",
    "cw # A UtilityAgent\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00048785"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Price of regenerating the utility in USD/kmol\n",
    "cw.regeneration_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5e-06"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Other utilities may be priced for amount of heat transfered in USD/kJ\n",
    "chilled_water = bst.HeatUtility.get_cooling_agent('chilled_water')\n",
    "chilled_water.heat_transfer_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "cw.T = 302 # Change the temperature of cooling water (K)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<UtilityAgent: low_pressure_steam>,\n",
       " <UtilityAgent: medium_pressure_steam>,\n",
       " <UtilityAgent: high_pressure_steam>]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.HeatUtility.heating_agents # All available heating agents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UtilityAgent: low_pressure_steam\n",
      " phase: 'g', T: 411.49 K, P: 344738 Pa\n",
      " heat_transfer_price: 0 USD/kJ\n",
      " regeneration_price: 0.238 USD/kmol\n",
      " heat_transfer_efficiency: 0.950\n",
      " T_limit: None\n",
      " flow (kmol/hr): Water  1\n"
     ]
    }
   ],
   "source": [
    "lps = bst.HeatUtility.get_heating_agent('low_pressure_steam') # A UtilityAgent\n",
    "lps # Note that because utility changes phase, T_limit is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "lps.regeneration_price = 0.20 # Adjust price (USD/kmol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find design requirements and cost with Unit objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Creating a Unit](https://biosteam.readthedocs.io/en/latest/Creating a Unit.html) can be flexible. But in summary, a [Unit](https://biosteam.readthedocs.io/en/latest/Unit.html) object is initialized with an ID, and unit-specific arguments. BioSTEAM includes [essential unit operations](https://biosteam.readthedocs.io/en/latest/units/units.html) with rigorous modeling and design algorithms. Here we create a [Flash](https://biosteam.readthedocs.io/en/latest/units/Flash.html) object as an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] missing stream\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n",
      "[1] s3\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n"
     ]
    }
   ],
   "source": [
    "from biosteam import units\n",
    "\n",
    "# Specify vapor fraction and isobaric conditions\n",
    "F1 = units.Flash('F1', V=0.5, P=101325)\n",
    "F1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that, by default, Missing Stream objects are given to inputs, `ins`, and empty streams to outputs, `outs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<MissingStream>]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.ins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Stream: s2>, <Stream: s3>]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.outs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can connect streams by setting the `ins` and `outs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     20\n",
      "                    Glycerol  10\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n",
      "[1] s3\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n"
     ]
    }
   ],
   "source": [
    "F1.ins[0] = feed\n",
    "F1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To simulate the flash, use the `simulate` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     20\n",
      "                    Glycerol  10\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'g', T: 382.91 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     15\n",
      "                    Glycerol  0.00534\n",
      "[1] s3\n",
      "    phase: 'l', T: 382.91 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     5.01\n",
      "                    Glycerol  9.99\n"
     ]
    }
   ],
   "source": [
    "F1.simulate()\n",
    "F1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `results` method returns simulation results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flash</th>\n",
       "      <th>Units</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Low pressure steam</th>\n",
       "      <th>Duty</th>\n",
       "      <td>kJ/hr</td>\n",
       "      <td>1.03e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flow</th>\n",
       "      <td>kmol/hr</td>\n",
       "      <td>26.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cost</th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>5.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">Design</th>\n",
       "      <th>Vessel type</th>\n",
       "      <td></td>\n",
       "      <td>Vertical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Length</th>\n",
       "      <td>ft</td>\n",
       "      <td>37.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diameter</th>\n",
       "      <td>ft</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weight</th>\n",
       "      <td>lb</td>\n",
       "      <td>1.28e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wall thickness</th>\n",
       "      <td>in</td>\n",
       "      <td>0.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Material</th>\n",
       "      <td></td>\n",
       "      <td>Carbon steel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Purchase cost</th>\n",
       "      <th>Flash</th>\n",
       "      <td>USD</td>\n",
       "      <td>8.14e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heat exchanger</th>\n",
       "      <td>USD</td>\n",
       "      <td>3.87e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total purchase cost</th>\n",
       "      <th></th>\n",
       "      <td>USD</td>\n",
       "      <td>8.53e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utility cost</th>\n",
       "      <th></th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>5.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Flash                                 Units            F1\n",
       "Low pressure steam  Duty              kJ/hr      1.03e+06\n",
       "                    Flow            kmol/hr          26.4\n",
       "                    Cost             USD/hr          5.28\n",
       "Design              Vessel type                  Vertical\n",
       "                    Length               ft          37.5\n",
       "                    Diameter             ft           6.5\n",
       "                    Weight               lb      1.28e+04\n",
       "                    Wall thickness       in         0.375\n",
       "                    Material                 Carbon steel\n",
       "Purchase cost       Flash               USD      8.14e+04\n",
       "                    Heat exchanger      USD      3.87e+03\n",
       "Total purchase cost                     USD      8.53e+04\n",
       "Utility cost                         USD/hr          5.28"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results() # Default returns DataFrame object with units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low pressure steam   Duty                  1.03e+06\n",
       "                     Flow                      26.4\n",
       "                     Cost                      5.28\n",
       "Design               Vessel type           Vertical\n",
       "                     Length                    37.5\n",
       "                     Diameter                   6.5\n",
       "                     Weight                1.28e+04\n",
       "                     Wall thickness           0.375\n",
       "                     Material          Carbon steel\n",
       "Purchase cost        Flash                 8.14e+04\n",
       "                     Heat exchanger        3.87e+03\n",
       "Total purchase cost                        8.53e+04\n",
       "Utility cost                                   5.28\n",
       "Name: F1, dtype: object"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results(with_units=False) # Returns Series object without units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve recycle loops and process specifications with System objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Designing a chemical process is no easy task. A simple recycle process consisting of a flash with a partial liquid recycle is presented here.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a [Mixer](https://biosteam.readthedocs.io/en/latest/Mixer.html) object and a [Splitter](https://biosteam.readthedocs.io/en/latest/Splitter.html) object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "M1 = units.Mixer('M1')\n",
    "S1 = units.Splitter('S1', outs=('liquid_recycle', 'liquid_product'),\n",
    "                    split=0.5) # Split to 0th output stream\n",
    "F1.outs[0].ID = 'vapor_product'\n",
    "F1.outs[1].ID = 'liquid'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can [find unit operations and manage flowsheets](https://biosteam.readthedocs.io/en/master/tutorial/Managing%20flowsheets.html) with `find`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"327pt\" viewBox=\"0.00 0.00 438.39 327.24\" width=\"438pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 323.24)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-323.24 434.392,-323.24 434.392,4 -4,4\" stroke=\"none\"/>\n",
       "<!-- M1\n",
       "Mixer&#45;&gt;s5 -->\n",
       "<g class=\"edge\" id=\"edge6\"><title>M1\n",
       "Mixer:e-&gt;s5:w</title>\n",
       "<path d=\"M149.196,-53.7401C181.061,-53.7401 189.027,-53.7401 220.892,-53.7401\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter&#45;&gt;liquid_product -->\n",
       "<g class=\"edge\" id=\"edge1\"><title>S1\n",
       "Splitter:c-&gt;liquid_product:w</title>\n",
       "<path d=\"M119.008,-175.302C141.087,-177.031 169.265,-178.74 194.392,-178.74\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter&#45;&gt;liquid_recycle -->\n",
       "<g class=\"edge\" id=\"edge3\"><title>S1\n",
       "Splitter:c-&gt;liquid_recycle:w</title>\n",
       "<path d=\"M118.948,-147.139C140.464,-135.767 168.208,-124.74 194.892,-124.74\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- F1\n",
       "Flash&#45;&gt;vapor_product -->\n",
       "<g class=\"edge\" id=\"edge4\"><title>F1\n",
       "Flash:n-&gt;vapor_product:w</title>\n",
       "<path d=\"M243.892,-298.74C243.892,-336.743 291.389,-297.74 329.392,-297.74\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- F1\n",
       "Flash&#45;&gt;liquid -->\n",
       "<g class=\"edge\" id=\"edge5\"><title>F1\n",
       "Flash:s-&gt;liquid:w</title>\n",
       "<path d=\"M243.892,-216.74C243.892,-192.072 330.224,-217.74 354.892,-217.74\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- s1&#45;&gt;F1\n",
       "Flash -->\n",
       "<g class=\"edge\" id=\"edge2\"><title>s1:e-&gt;F1\n",
       "Flash:c</title>\n",
       "<path d=\"M102.196,-257.74C138.103,-257.74 179.164,-257.74 207.621,-257.74\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- M1\n",
       "Mixer -->\n",
       "<g class=\"node\" id=\"node1\"><title>M1\n",
       "Mixer</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_0\" x1=\"44.6492\" x2=\"148.289\" y1=\"-53.7401\" y2=\"-53.7401\">\n",
       "<stop offset=\"0\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:#cdcdcd;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_0)\" points=\"148.289,-53.7401 44.6492,-107.721 44.6492,0.241193 148.289,-53.7401\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-57.5401\">M1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-42.5401\">Mixer</text>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter -->\n",
       "<g class=\"node\" id=\"node2\"><title>S1\n",
       "Splitter</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_1\" x1=\"-0.196446\" x2=\"118.892\" y1=\"-171.74\" y2=\"-171.74\">\n",
       "<stop offset=\"0\" style=\"stop-color:#bfbfbf;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_1)\" points=\"-0.196446,-171.74 118.892,-117.759 118.892,-225.721 -0.196446,-171.74\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-175.54\">S1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-160.54\">Splitter</text>\n",
       "</g>\n",
       "<!-- F1\n",
       "Flash -->\n",
       "<g class=\"node\" id=\"node3\"><title>F1\n",
       "Flash</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_2\" x1=\"207.892\" x2=\"279.892\" y1=\"-257.74\" y2=\"-257.74\">\n",
       "<stop offset=\"0\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:#cdcdcd;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_2)\" points=\"279.892,-297.24 207.892,-297.24 207.892,-218.24 279.892,-218.24 279.892,-297.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.892\" y=\"-261.54\">F1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.892\" y=\"-246.54\">Flash</text>\n",
       "</g>\n",
       "<!-- liquid_product -->\n",
       "<g class=\"node\" id=\"node4\"><title>liquid_product</title>\n",
       "<polygon fill=\"#79dae8\" points=\"275.392,-194.24 194.392,-194.24 194.392,-163.24 275.392,-163.24 275.392,-157.24 293.392,-178.74 275.392,-200.24 275.392,-194.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.892\" y=\"-175.04\">liquid_product</text>\n",
       "</g>\n",
       "<!-- s1 -->\n",
       "<g class=\"node\" id=\"node5\"><title>s1</title>\n",
       "<polygon fill=\"#79dae8\" points=\"82.696,-273.24 57.696,-273.24 57.696,-242.24 82.696,-242.24 82.696,-236.24 100.696,-257.74 82.696,-279.24 82.696,-273.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-254.04\">s1</text>\n",
       "</g>\n",
       "<!-- liquid_recycle -->\n",
       "<g class=\"node\" id=\"node6\"><title>liquid_recycle</title>\n",
       "<polygon fill=\"#79dae8\" points=\"273.392,-140.24 196.392,-140.24 196.392,-109.24 273.392,-109.24 273.392,-103.24 291.392,-124.74 273.392,-146.24 273.392,-140.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.892\" y=\"-121.04\">liquid_recycle</text>\n",
       "</g>\n",
       "<!-- vapor_product -->\n",
       "<g class=\"node\" id=\"node7\"><title>vapor_product</title>\n",
       "<polygon fill=\"#79dae8\" points=\"412.392,-313.24 329.392,-313.24 329.392,-282.24 412.392,-282.24 412.392,-276.24 430.392,-297.74 412.392,-319.24 412.392,-313.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"379.892\" y=\"-294.04\">vapor_product</text>\n",
       "</g>\n",
       "<!-- liquid -->\n",
       "<g class=\"node\" id=\"node8\"><title>liquid</title>\n",
       "<polygon fill=\"#79dae8\" points=\"385.392,-233.24 356.392,-233.24 356.392,-202.24 385.392,-202.24 385.392,-196.24 403.392,-217.74 385.392,-239.24 385.392,-233.24\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"379.892\" y=\"-214.04\">liquid</text>\n",
       "</g>\n",
       "<!-- s5 -->\n",
       "<g class=\"node\" id=\"node9\"><title>s5</title>\n",
       "<polygon fill=\"#79dae8\" points=\"247.392,-69.2401 222.392,-69.2401 222.392,-38.2401 247.392,-38.2401 247.392,-32.2401 265.392,-53.7401 247.392,-75.2401 247.392,-69.2401\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"243.892\" y=\"-50.0401\">s5</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bst.find.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connect streams and make a recycle loop using [-pipe- notation](https://biosteam.readthedocs.io/en/latest/Using -pipe- notation.html):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "feed = bst.Stream('feed', Glycerol=100, Water=450)\n",
    "\n",
    "# Broken down -pipe- notation\n",
    "[S1-0, feed]-M1     # M1.ins[:] = [S1.outs[0], feed]\n",
    "M1-F1               # F1.ins[:] = M1.outs\n",
    "F1-1-S1             # S1.ins[:] = [F1.outs[1]]\n",
    "\n",
    "# All together\n",
    "[S1-0, feed]-M1-F1-1-S1;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets check the diagram again:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bst.find.diagram(format='png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A [System](https://biosteam.readthedocs.io/en/latest/System.html) object can be created directly from the flowsheet:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System: sys1\n",
      " recycle: liquid_recycle\n",
      " path: (M1, F1, S1)\n",
      " convergence error: Flow rate   0.00e+00 kmol/hr\n",
      "                    Temperature 0.00e+00 K\n",
      " iterations: 0\n"
     ]
    }
   ],
   "source": [
    "sys1 = bst.find.create_system('sys1')\n",
    "sys1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, create a [System](https://biosteam.readthedocs.io/en/latest/System.html) object by specifying an ID, a `recycle` stream and a `path` of units to run element by element:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System: sys1\n",
      " recycle: liquid_recycle\n",
      " path: (M1, F1, S1)\n",
      " convergence error: Flow rate   0.00e+00 kmol/hr\n",
      "                    Temperature 0.00e+00 K\n",
      " iterations: 0\n"
     ]
    }
   ],
   "source": [
    "sys1 = bst.System('sys1', path=(M1, F1, S1), recycle=S1-0) # recycle=S1.outs[0]\n",
    "sys1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "View the System object as a Graphviz diagram:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sys1.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulate the System object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System: sys1\n",
      " recycle: liquid_recycle\n",
      " path: (M1, F1, S1)\n",
      " convergence error: Flow rate   5.91e-03 kmol/hr\n",
      "                    Temperature 8.44e-02 K\n",
      " iterations: 5\n"
     ]
    }
   ],
   "source": [
    "sys1.simulate()\n",
    "sys1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s5  from  Mixer-M1\n",
      "    phase: 'l', T: 326.07 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     533\n",
      "                    Glycerol  200\n",
      "outs...\n",
      "[0] vapor_product\n",
      "    phase: 'g', T: 377.45 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     367\n",
      "                    Glycerol  0.0795\n",
      "[1] liquid  to  Splitter-S1\n",
      "    phase: 'l', T: 377.45 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     167\n",
      "                    Glycerol  200\n"
     ]
    }
   ],
   "source": [
    "F1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flash</th>\n",
       "      <th>Units</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Low pressure steam</th>\n",
       "      <th>Duty</th>\n",
       "      <td>kJ/hr</td>\n",
       "      <td>2.15e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flow</th>\n",
       "      <td>kmol/hr</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cost</th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">Design</th>\n",
       "      <th>Vessel type</th>\n",
       "      <td></td>\n",
       "      <td>Vertical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Length</th>\n",
       "      <td>ft</td>\n",
       "      <td>35.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diameter</th>\n",
       "      <td>ft</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weight</th>\n",
       "      <td>lb</td>\n",
       "      <td>1.12e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wall thickness</th>\n",
       "      <td>in</td>\n",
       "      <td>0.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Material</th>\n",
       "      <td></td>\n",
       "      <td>Carbon steel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Purchase cost</th>\n",
       "      <th>Flash</th>\n",
       "      <td>USD</td>\n",
       "      <td>7.45e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heat exchanger</th>\n",
       "      <td>USD</td>\n",
       "      <td>5.51e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total purchase cost</th>\n",
       "      <th></th>\n",
       "      <td>USD</td>\n",
       "      <td>8e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utility cost</th>\n",
       "      <th></th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Flash                                 Units            F1\n",
       "Low pressure steam  Duty              kJ/hr      2.15e+07\n",
       "                    Flow            kmol/hr           553\n",
       "                    Cost             USD/hr           111\n",
       "Design              Vessel type                  Vertical\n",
       "                    Length               ft          35.5\n",
       "                    Diameter             ft             6\n",
       "                    Weight               lb      1.12e+04\n",
       "                    Wall thickness       in         0.375\n",
       "                    Material                 Carbon steel\n",
       "Purchase cost       Flash               USD      7.45e+04\n",
       "                    Heat exchanger      USD      5.51e+03\n",
       "Total purchase cost                     USD         8e+04\n",
       "Utility cost                         USD/hr           111"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save a system report:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: Cannot find TEA object in <System: sys1>. Ignoring TEA sheets.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "sys1.save_report('Example.xlsx') # Try this on your computer and open excel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once process settings are set and the system is simulated, it is possible to perform [techno-economic analysis](https://biosteam.readthedocs.io/en/latest/Techno-economic analysis.html). If a [TEA](https://biosteam.readthedocs.io/en/latest/TEA.html) object of the system was initialized, TEA results would also appear in the report."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Join the community!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "BioSTEAM will become more relevant with communitity involvement. It is strongly encouraged to share designs and new [Unit subclasses](https://biosteam.readthedocs.io/en/latest/Inheriting from Unit.html), no matter how preliminary or rigorous they are."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
