{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Getting started"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Process settings"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Process settings include price of feeds and products, conditions of utilities, and the chemical engineering plant cost index. These should be set before simulating a system.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set the chemical engineering plant cost index:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "567.5"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import biosteam as bst\n",
    "bst.CE # Default year is 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "bst.CE = 603.1 # To year 2018"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [PowerUtility](https://biosteam.readthedocs.io/en/latest/PowerUtility.html) options:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0782"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.PowerUtility.price # Default price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "bst.PowerUtility.price = 0.065 # Adjust price"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Set [HeatUtility](https://biosteam.readthedocs.io/en/latest/HeatUtility.html) options via [UtilityAgent](https://biosteam.readthedocs.io/en/latest/UtilityAgent.html) objects. These are basically [Stream](https://thermosteam.readthedocs.io/en/latest/Stream.html) objects with additional attributes to describe a utility agent:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<UtilityAgent: cooling_water>,\n",
       " <UtilityAgent: chilled_water>,\n",
       " <UtilityAgent: chilled_water>]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.HeatUtility.cooling_agents # All available cooling agents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UtilityAgent: cooling_water\n",
      " phase: 'l', T: 305.37 K, P: 101325 Pa\n",
      " heat_transfer_price: 0 USD/kJ\n",
      " regeneration_price: 0.000488 USD/kmol\n",
      " heat_transfer_efficiency: 1.000\n",
      " T_limit: {T_limit:.3g} K\n",
      " flow (kmol/hr): Water  1\n"
     ]
    }
   ],
   "source": [
    "cw = bst.HeatUtility.get_cooling_agent('cooling_water')\n",
    "cw # A UtilityAgent\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00048785"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Price of regenerating the utility in USD/kmol\n",
    "cw.regeneration_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5e-06"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Other utilities may be priced for amount of heat transfered in USD/kJ\n",
    "chilled_water = bst.HeatUtility.get_cooling_agent('chilled_water')\n",
    "chilled_water.heat_transfer_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "cw.T = 302 # Change the temperature of cooling water (K)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<UtilityAgent: low_pressure_steam>,\n",
       " <UtilityAgent: medium_pressure_steam>,\n",
       " <UtilityAgent: high_pressure_steam>]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bst.HeatUtility.heating_agents # All available heating agents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "UtilityAgent: low_pressure_steam\n",
      " phase: 'g', T: 411.49 K, P: 344738 Pa\n",
      " heat_transfer_price: 0 USD/kJ\n",
      " regeneration_price: 0.238 USD/kmol\n",
      " heat_transfer_efficiency: 0.950\n",
      " T_limit: None\n",
      " flow (kmol/hr): Water  1\n"
     ]
    }
   ],
   "source": [
    "lps = bst.HeatUtility.get_heating_agent('low_pressure_steam') # A UtilityAgent\n",
    "lps # Note that because utility changes phase, T_limit is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "lps.regeneration_price = 0.20 # Change price (USD/kmol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Initialize streams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Stream](https://thermosteam.readthedocs.io/en/latest/Stream.html) objects define material flow rates along with its thermodynamic state. Before creating streams, a thermo property package must be defined through a [Thermo](https://thermosteam.readthedocs.io/en/latest/Thermo.html) object. Please visit [Thermosteam's documentation](https://thermosteam.readthedocs.io/en/latest/index.html) for a complete tutorial on `Stream` objects and BioSTEAM's thermodynamic engine. In this example, a simple feed stream with a few common chemicals will be initialized:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stream: s1\n",
      " phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      " flow (kmol/hr): Water     20\n",
      "                 Glycerol  10\n"
     ]
    }
   ],
   "source": [
    "import thermosteam as tmo\n",
    "chemicals = tmo.Chemicals(['Water', 'Methanol', 'Glycerol'])\n",
    "tmo.settings.set_thermo(chemicals)\n",
    "feed = tmo.Stream(Water=20, Glycerol=10)\n",
    "feed.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find design requirements and cost with Unit objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Creating a Unit](https://biosteam.readthedocs.io/en/latest/Creating a Unit.html) can be flexible. But in summary, a [Unit](https://biosteam.readthedocs.io/en/latest/Unit.html) object is initialized with an ID, and unit-specific arguments. BioSTEAM includes [essential unit operations](https://biosteam.readthedocs.io/en/latest/units/units.html) with rigorous modeling and design algorithms. Here we create a [Flash](https://biosteam.readthedocs.io/en/latest/units/Flash.html) object as an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] missing stream\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n",
      "[1] s3\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n"
     ]
    }
   ],
   "source": [
    "import biosteam as bst\n",
    "from biosteam import units\n",
    "\n",
    "# Specify vapor fraction and isobaric conditions\n",
    "F1 = units.Flash('F1', V=0.5, P=101325)\n",
    "F1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that, by default, Missing Stream objects are given to inputs, `ins`, and empty streams to outputs, `outs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<MissingStream>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.ins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<Stream: s2>, <Stream: s3>]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.outs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can connect streams by setting the `ins` and `outs`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     20\n",
      "                    Glycerol  10\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n",
      "[1] s3\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow: 0\n"
     ]
    }
   ],
   "source": [
    "F1.ins[0] = feed\n",
    "F1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To simulate the flash, use the `simulate` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s1\n",
      "    phase: 'l', T: 298.15 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     20\n",
      "                    Glycerol  10\n",
      "outs...\n",
      "[0] s2\n",
      "    phase: 'g', T: 382.91 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     15\n",
      "                    Glycerol  0.00534\n",
      "[1] s3\n",
      "    phase: 'l', T: 382.91 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     5.01\n",
      "                    Glycerol  9.99\n"
     ]
    }
   ],
   "source": [
    "F1.simulate()\n",
    "F1.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `results` method returns simulation results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flash</th>\n",
       "      <th>Units</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Low pressure steam</th>\n",
       "      <th>Duty</th>\n",
       "      <td>kJ/hr</td>\n",
       "      <td>1.03e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flow</th>\n",
       "      <td>kmol/hr</td>\n",
       "      <td>26.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cost</th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>5.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">Design</th>\n",
       "      <th>Vessel type</th>\n",
       "      <td></td>\n",
       "      <td>Vertical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Length</th>\n",
       "      <td>ft</td>\n",
       "      <td>37.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diameter</th>\n",
       "      <td>ft</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weight</th>\n",
       "      <td>lb</td>\n",
       "      <td>1.28e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wall thickness</th>\n",
       "      <td>in</td>\n",
       "      <td>0.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Material</th>\n",
       "      <td></td>\n",
       "      <td>Carbon steel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Purchase cost</th>\n",
       "      <th>Flash</th>\n",
       "      <td>USD</td>\n",
       "      <td>8.14e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heat exchanger</th>\n",
       "      <td>USD</td>\n",
       "      <td>3.87e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total purchase cost</th>\n",
       "      <th></th>\n",
       "      <td>USD</td>\n",
       "      <td>8.53e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utility cost</th>\n",
       "      <th></th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>5.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Flash                                 Units            F1\n",
       "Low pressure steam  Duty              kJ/hr      1.03e+06\n",
       "                    Flow            kmol/hr          26.4\n",
       "                    Cost             USD/hr          5.28\n",
       "Design              Vessel type                  Vertical\n",
       "                    Length               ft          37.5\n",
       "                    Diameter             ft           6.5\n",
       "                    Weight               lb      1.28e+04\n",
       "                    Wall thickness       in         0.375\n",
       "                    Material                 Carbon steel\n",
       "Purchase cost       Flash               USD      8.14e+04\n",
       "                    Heat exchanger      USD      3.87e+03\n",
       "Total purchase cost                     USD      8.53e+04\n",
       "Utility cost                         USD/hr          5.28"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results() # Default returns DataFrame object with units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Low pressure steam   Duty                  1.03e+06\n",
       "                     Flow                      26.4\n",
       "                     Cost                      5.28\n",
       "Design               Vessel type           Vertical\n",
       "                     Length                    37.5\n",
       "                     Diameter                   6.5\n",
       "                     Weight                1.28e+04\n",
       "                     Wall thickness           0.375\n",
       "                     Material          Carbon steel\n",
       "Purchase cost        Flash                 8.14e+04\n",
       "                     Heat exchanger        3.87e+03\n",
       "Total purchase cost                        8.53e+04\n",
       "Utility cost                                   5.28\n",
       "Name: F1, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results(with_units=False) # Returns Series object without units"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve recycle loops and process specifications with System objects"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Designing a chemical process is no easy task. A simple recycle process consisting of a flash with a partial liquid recycle is presented here.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a [Mixer](https://biosteam.readthedocs.io/en/latest/Mixer.html) object and a [Splitter](https://biosteam.readthedocs.io/en/latest/Splitter.html) object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "M1 = units.Mixer('M1')\n",
    "S1 = units.Splitter('S1', split=0.5) # Split to 0th output stream\n",
    "F1.outs[0].ID = 'product'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can [find unit operations and manage flowsheets](https://biosteam.readthedocs.io/en/master/tutorial/Managing%20flowsheets.html) with `find`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"350pt\" viewBox=\"0.00 0.00 371.39 350.24\" width=\"371pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 346.24)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-346.24 367.392,-346.24 367.392,4 -4,4\" stroke=\"none\"/>\n",
       "<!-- F1\n",
       "Flash&#45;&gt;product -->\n",
       "<g class=\"edge\" id=\"edge1\"><title>F1\n",
       "Flash:n-&gt;product:w</title>\n",
       "<path d=\"M230.392,-102.5C230.392,-118.502 286.39,-101.5 302.392,-101.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- F1\n",
       "Flash&#45;&gt;s3 -->\n",
       "<g class=\"edge\" id=\"edge2\"><title>F1\n",
       "Flash:s-&gt;s3:w</title>\n",
       "<path d=\"M230.392,-20.5C230.392,14.8361 274.556,-21.5 309.892,-21.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter&#45;&gt;s6 -->\n",
       "<g class=\"edge\" id=\"edge4\"><title>S1\n",
       "Splitter:c-&gt;s6:w</title>\n",
       "<path d=\"M119.089,-181.727C144.09,-187.973 177.391,-194.5 207.392,-194.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter&#45;&gt;s7 -->\n",
       "<g class=\"edge\" id=\"edge5\"><title>S1\n",
       "Splitter:c-&gt;s7:w</title>\n",
       "<path d=\"M119.171,-156.378C144.063,-148.597 177.216,-140.5 207.392,-140.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- M1\n",
       "Mixer&#45;&gt;s5 -->\n",
       "<g class=\"edge\" id=\"edge3\"><title>M1\n",
       "Mixer:e-&gt;s5:w</title>\n",
       "<path d=\"M149.196,-288.5C175.061,-288.5 181.527,-288.5 207.392,-288.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- s1&#45;&gt;F1\n",
       "Flash -->\n",
       "<g class=\"edge\" id=\"edge6\"><title>s1:e-&gt;F1\n",
       "Flash:c</title>\n",
       "<path d=\"M102.196,-61.5C133.332,-61.5 168.756,-61.5 194.299,-61.5\" fill=\"none\" stroke=\"black\"/>\n",
       "</g>\n",
       "<!-- F1\n",
       "Flash -->\n",
       "<g class=\"node\" id=\"node1\"><title>F1\n",
       "Flash</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_0\" x1=\"194.392\" x2=\"266.392\" y1=\"-61.5\" y2=\"-61.5\">\n",
       "<stop offset=\"0\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:#cdcdcd;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_0)\" points=\"266.392,-101 194.392,-101 194.392,-22 266.392,-22 266.392,-101\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"230.392\" y=\"-65.3\">F1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"230.392\" y=\"-50.3\">Flash</text>\n",
       "</g>\n",
       "<!-- S1\n",
       "Splitter -->\n",
       "<g class=\"node\" id=\"node2\"><title>S1\n",
       "Splitter</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_1\" x1=\"-0.196446\" x2=\"118.892\" y1=\"-170.5\" y2=\"-170.5\">\n",
       "<stop offset=\"0\" style=\"stop-color:#bfbfbf;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_1)\" points=\"-0.196446,-170.5 118.892,-116.519 118.892,-224.481 -0.196446,-170.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-174.3\">S1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-159.3\">Splitter</text>\n",
       "</g>\n",
       "<!-- M1\n",
       "Mixer -->\n",
       "<g class=\"node\" id=\"node3\"><title>M1\n",
       "Mixer</title>\n",
       "<defs>\n",
       "<linearGradient gradientUnits=\"userSpaceOnUse\" id=\"l_2\" x1=\"44.6492\" x2=\"148.289\" y1=\"-288.5\" y2=\"-288.5\">\n",
       "<stop offset=\"0\" style=\"stop-color:white;stop-opacity:1.;\"/>\n",
       "<stop offset=\"1\" style=\"stop-color:#cdcdcd;stop-opacity:1.;\"/>\n",
       "</linearGradient>\n",
       "</defs>\n",
       "<polygon fill=\"url(#l_2)\" points=\"148.289,-288.5 44.6492,-342.481 44.6492,-234.519 148.289,-288.5\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-292.3\">M1</text>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-277.3\">Mixer</text>\n",
       "</g>\n",
       "<!-- product -->\n",
       "<g class=\"node\" id=\"node4\"><title>product</title>\n",
       "<polygon fill=\"#79dae8\" points=\"345.392,-117 302.392,-117 302.392,-86 345.392,-86 345.392,-80 363.392,-101.5 345.392,-123 345.392,-117\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"332.892\" y=\"-97.8\">product</text>\n",
       "</g>\n",
       "<!-- s3 -->\n",
       "<g class=\"node\" id=\"node5\"><title>s3</title>\n",
       "<polygon fill=\"#79dae8\" points=\"336.392,-37 311.392,-37 311.392,-6 336.392,-6 336.392,-0 354.392,-21.5 336.392,-43 336.392,-37\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"332.892\" y=\"-17.8\">s3</text>\n",
       "</g>\n",
       "<!-- s5 -->\n",
       "<g class=\"node\" id=\"node6\"><title>s5</title>\n",
       "<polygon fill=\"#79dae8\" points=\"233.892,-304 208.892,-304 208.892,-273 233.892,-273 233.892,-267 251.892,-288.5 233.892,-310 233.892,-304\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"230.392\" y=\"-284.8\">s5</text>\n",
       "</g>\n",
       "<!-- s6 -->\n",
       "<g class=\"node\" id=\"node7\"><title>s6</title>\n",
       "<polygon fill=\"#79dae8\" points=\"233.892,-210 208.892,-210 208.892,-179 233.892,-179 233.892,-173 251.892,-194.5 233.892,-216 233.892,-210\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"230.392\" y=\"-190.8\">s6</text>\n",
       "</g>\n",
       "<!-- s7 -->\n",
       "<g class=\"node\" id=\"node8\"><title>s7</title>\n",
       "<polygon fill=\"#79dae8\" points=\"233.892,-156 208.892,-156 208.892,-125 233.892,-125 233.892,-119 251.892,-140.5 233.892,-162 233.892,-156\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"230.392\" y=\"-136.8\">s7</text>\n",
       "</g>\n",
       "<!-- s1 -->\n",
       "<g class=\"node\" id=\"node9\"><title>s1</title>\n",
       "<polygon fill=\"#79dae8\" points=\"82.696,-77 57.696,-77 57.696,-46 82.696,-46 82.696,-40 100.696,-61.5 82.696,-83 82.696,-77\" stroke=\"black\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"14.00\" text-anchor=\"middle\" x=\"79.196\" y=\"-57.8\">s1</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bst.find.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Connect streams and make a recycle loop using [-pipe- notation](https://biosteam.readthedocs.io/en/latest/Using -pipe- notation.html):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "feed = tmo.Stream('feed', Glycerol=100, Water=450)\n",
    "\n",
    "# Broken down -pipe- notation\n",
    "[S1-0, feed]-M1     # M1.ins[:] = [S1.outs[0], feed]\n",
    "M1-F1               # F1.ins[:] = M1.outs\n",
    "F1-1-S1             # S1.ins[:] = [F1.outs[1]]\n",
    "\n",
    "# All together\n",
    "[S1-0, feed]-M1-F1-1-S1;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create [System](https://biosteam.readthedocs.io/en/latest/System.html) object by specifying an ID, a `recycle` stream and a `network` of units:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System: sys1\n",
      " recycle: s6\n",
      " network: (M1, F1, S1)\n",
      " convergence error: Flow rate   0.00e+00 kmol/hr\n",
      "                    Temperature 0.00e+00 K\n",
      " iterations: 0\n"
     ]
    }
   ],
   "source": [
    "sys1 = bst.System('sys1', network=(M1, F1, S1), recycle=S1-0) # recycle=S1.outs[0]\n",
    "sys1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "View the System object as a Graphviz diagram:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sys1.diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simulate the System object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "System: sys1\n",
      " recycle: s6\n",
      " network: (M1, F1, S1)\n",
      " convergence error: Flow rate   5.91e-03 kmol/hr\n",
      "                    Temperature 8.44e-02 K\n",
      " iterations: 5\n"
     ]
    }
   ],
   "source": [
    "sys1.simulate()\n",
    "sys1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flash: F1\n",
      "ins...\n",
      "[0] s5  from  Mixer-M1\n",
      "    phase: 'l', T: 326.07 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     533\n",
      "                    Glycerol  200\n",
      "outs...\n",
      "[0] product\n",
      "    phase: 'g', T: 377.45 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     367\n",
      "                    Glycerol  0.0795\n",
      "[1] s3  to  Splitter-S1\n",
      "    phase: 'l', T: 377.45 K, P: 101325 Pa\n",
      "    flow (kmol/hr): Water     167\n",
      "                    Glycerol  200\n"
     ]
    }
   ],
   "source": [
    "F1.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Flash</th>\n",
       "      <th>Units</th>\n",
       "      <th>F1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Low pressure steam</th>\n",
       "      <th>Duty</th>\n",
       "      <td>kJ/hr</td>\n",
       "      <td>2.15e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flow</th>\n",
       "      <td>kmol/hr</td>\n",
       "      <td>553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cost</th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"6\" valign=\"top\">Design</th>\n",
       "      <th>Vessel type</th>\n",
       "      <td></td>\n",
       "      <td>Vertical</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Length</th>\n",
       "      <td>ft</td>\n",
       "      <td>35.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diameter</th>\n",
       "      <td>ft</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weight</th>\n",
       "      <td>lb</td>\n",
       "      <td>1.12e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wall thickness</th>\n",
       "      <td>in</td>\n",
       "      <td>0.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Material</th>\n",
       "      <td></td>\n",
       "      <td>Carbon steel</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">Purchase cost</th>\n",
       "      <th>Flash</th>\n",
       "      <td>USD</td>\n",
       "      <td>7.45e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Heat exchanger</th>\n",
       "      <td>USD</td>\n",
       "      <td>5.51e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Total purchase cost</th>\n",
       "      <th></th>\n",
       "      <td>USD</td>\n",
       "      <td>8e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utility cost</th>\n",
       "      <th></th>\n",
       "      <td>USD/hr</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Flash                                 Units            F1\n",
       "Low pressure steam  Duty              kJ/hr      2.15e+07\n",
       "                    Flow            kmol/hr           553\n",
       "                    Cost             USD/hr           111\n",
       "Design              Vessel type                  Vertical\n",
       "                    Length               ft          35.5\n",
       "                    Diameter             ft             6\n",
       "                    Weight               lb      1.12e+04\n",
       "                    Wall thickness       in         0.375\n",
       "                    Material                 Carbon steel\n",
       "Purchase cost       Flash               USD      7.45e+04\n",
       "                    Heat exchanger      USD      5.51e+03\n",
       "Total purchase cost                     USD         8e+04\n",
       "Utility cost                         USD/hr           111"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1.results()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save a system report:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: RuntimeWarning: Cannot find TEA object in <System: sys1>. Ignoring TEA sheets.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "sys1.save_report('Example.xlsx') # Try this on your computer and open excel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once process settings are set and the system is simulated, it is possible to perform [techno-economic analysis](https://biosteam.readthedocs.io/en/latest/Techno-economic analysis.html). If a [TEA](https://biosteam.readthedocs.io/en/latest/TEA.html) object of the system was initialized, TEA results would also appear in the report."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Join the community!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "BioSTEAM will become more relevant with communitity involvement. It is strongly encouraged to share designs and new [Unit subclasses](https://biosteam.readthedocs.io/en/latest/Inheriting from Unit.html), no matter how preliminary or rigorous they are."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
